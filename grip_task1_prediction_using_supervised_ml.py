# -*- coding: utf-8 -*-
"""GRIP Task1 Prediction using Supervised ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/149KfWAopgjlf6bYtsJTukT_ujt1R4c6h

**Krish Sukhani**

**GRIP The Sparks Foundation Task 1**

**Business and Data Analytics**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

students_data = "http://bit.ly/w-data"
students_data = pd.read_csv(students_data)

students_data.head()

students_data.tail()

students_data.info()

students_data.describe()

students_data.shape

students_data.corr()

sns.scatterplot(x="Hours", y="Scores",data=students_data)

X = students_data.iloc[:, :-1].values  
y = students_data.iloc[:, 1].values

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression  
lr = LinearRegression()  
lr.fit(X_train, y_train)

# Plotting the regression line
line = lr.coef_*X+lr.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

print(X_test) 
y_pred = lr.predict(X_test) 
# Predicting the scores

# Comparing Actual vs Predicted
compare_data = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
compare_data

# Testing with the given data
hours = [[9.25]]
own_pred = lr.predict(hours)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))

print('Mean Absolute Error:', str(mean_absolute_error(y_test, y_pred)))

print('Mean squared error = ' + str(mean_squared_error(y_test, y_pred)))

print('R2 score = ' + str(r2_score(y_test, y_pred)))

